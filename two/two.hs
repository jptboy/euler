{-
  Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
  By starting with 1 and 2, the first 10 terms will be:  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...  
  By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 
  Again a brute force instead of using a closed form, in order to learn Haskell.
 
 -}
main = do
    putStrLn "The answer is:"
    print(fibList)


fibGen::Integer->Integer->[Integer]--this will only work with Integer data type for takewhile function,
fibGen x y = x:fibGen y (x+y)--generate the list by saying fib x y is x joined with the list fib y x+y, infinite list
-- e.g 0 ++ ([1,1,2,3, ...])

fibList = sum([x | x <- takeWhile (<= 4000000) (fibGen 0 1), even x]) -- take from an infinite list using the takeWhile function which takes a predicate(conditional) and the infinite list
-- say we only want the evens
